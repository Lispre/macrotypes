#lang racket/base
(require racket/match racket/system racket/port)

(match-define (list i1 o1 id1 err1 f1)
  (process "time racket run-mlish-tests1.rkt"))
(match-define (list i2 o2 id2 err2 f2)
  (process "time racket run-mlish-tests2.rkt"))
(match-define (list i3 o3 id3 err3 f3)
  (process "time racket run-mlish-tests3.rkt"))
(match-define (list i4 o4 id4 err4 f4)
  (process "time racket run-mlish-tests4.rkt"))

(displayln "----- General MLish tests: --------------------------------------")
(write-string (port->string err1))
(write-string (port->string i1))
(displayln "----- Shootout and RW OCaml tests: ------------------------------")
(write-string (port->string err2))
(write-string (port->string i2))
(displayln "----- Ben's tests: ----------------------------------------------")
(write-string (port->string err3))
(write-string (port->string i3))
(displayln "----- Okasaki / polymorphic recursion tests: --------------------")
(write-string (port->string err4))
(write-string (port->string i4))

(close-input-port i1)
(close-output-port o1)
(close-input-port err1)
(close-input-port i2)
(close-output-port o2)
(close-input-port err2)
(close-input-port i3)
(close-output-port o3)
(close-input-port err3)
(close-input-port i4)
(close-output-port o4)
(close-input-port err4)
