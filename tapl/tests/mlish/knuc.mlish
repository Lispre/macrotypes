#lang s-exp "../../mlish.rkt"
(require "../rackunit-typechecking.rkt")

(require-typed mk-fasta #:from "fasta.mlish")

(define (all-counts [len : Int][dna : String] -> (Hash String (Ref Int)))
  (let ([table (hash {String (Ref Int)})])
    (for ([s (in-range (- (string-length dna) len) -1 -1)])
      (let ([key (make-string len)])
        (string-copy! key 0 dna s (+ s len))
        (let* ([b (if (hash-has-key? table key)
                      (hash-ref table key)
                      (let ([b (ref 0)])
                        (hash-set! table key b)
                        b))])
          (:= b (add1 (deref b))))))
    table))

;; (define (write-freqs table)
;;   (let* ([content (hash-map table (lambda (k v) (cons k (unbox v))))]
;;          [total (exact->inexact (apply + (map cdr content)))])
;;     (for ([a (sort content > #:key cdr)])
;;       (printf "~a ~a\n" 
;;               (car a) 
;;               (real->decimal-string (* 100 (/ (cdr a) total)) 3)))))

#;(define (write-one-freq [table : (Hash String (Ref Int))][key : String] -> Unit)
  (let ([cnt (hash-ref table key (box 0))])
    (printf "~a\t~a\n" (unbox cnt) key)))

(define dna
  (let* ([in (mk-fasta 100000)]
         ;; Skip to ">THREE ..."
         [rst (head (tail (regexp-match (regexp ">THREE Homo sapiens frequency\n(.*)$") in)))])
    (let ([s (open-output-string)])
      ;; Copy everything but newlines to s:
      (for ([l (in-lines rst)])
        (write-string l s))
      ;; Extract the string from s:
      (string-upcase (get-output-string s)))))

(check-type dna : String)

(check-type (all-counts 1 dna) : (Hash String (Ref Int)))
;; ;; 1-nucleotide counts:
;; (write-freqs (all-counts 1 dna))
;; (newline)

(check-type (all-counts 2 dna) : (Hash String (Ref Int)))
;; ;; 2-nucleotide counts:
;; (write-freqs (all-counts 2 dna))
;; (newline)

;; Specific sequences:
(check-type
    (for/list ([seq (in-list (list "GGT" "GGTA" "GGTATT" 
                                   "GGTATTTTAATT" "GGTATTTTAATTTATAGT"))])
      (let ([table (all-counts (string-length seq) dna)])
        (if (hash-has-key? table seq)
            (deref (hash-ref table seq))
            0)))
  : (List Int) 
  -> (list 5861 1776 176 0 0))
  #;(write-one-freq (all-counts (string-length seq) dna)
                  seq)
