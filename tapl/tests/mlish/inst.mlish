#lang s-exp "../../mlish.rkt"
(require "../rackunit-typechecking.rkt")

;; tests for instantiation of polymorphic functions and constructors

(define-type (Result A B)
  (Ok A)
  (Error B))

(define {A B} (ok [a : A] -> (Result A B))
  (Ok a))

(check-type ok : (→/test {A B} A (Result A B))) ; test inferred
(check-type (inst ok Int String) : (→/test Int (Result Int String)))

(define (f -> (Result Int String))
  (ok 1))

(check-type f : (→/test (Result Int String)))

(define (g -> (Result Int String))
  (Ok 1))

(check-type g : (→/test (Result Int String)))

(define (h -> (Result Int Y))
  (Ok 1))

(check-type h : (→/test (Result Int Y)))

(define (i -> (Result Int String))
  (h))

(check-type i : (→/test (Result Int String)))

(define (f/cond [b : Bool] -> (Result Int String))
  (cond [b (ok 1)]
        [else (ok 0)]))
